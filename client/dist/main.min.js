/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// ----------------------------------------------------------------------------
	// create angular application
	var filemanager = angular.module( 'florentindubois.filemanager', [
	    'ngAnimate',
	    'ngAria',
	    'ngMaterial',
	    'ngMessages',
	    'ngRoute',
	    'ngSanitize',
	    'pascalprecht.translate'
	]);
	// ----------------------------------------------------------------------------
	// configs routes
	filemanager.config(['$routeProvider', function( $routeProvider ) {
	    var routes = [
	        { path: '/fs', controller: 'fs', templateUrl: 'views/fs.jade' },
	        { path: '/manage-account', controller: 'manageAccount', templateUrl: 'views/manage-account.jade' }
	    ];

	    for( var i in routes ) {
	        $routeProvider.when( routes[i].path, {
	            controller: 'filemanager.' + routes[i].controller,
	            templateUrl: routes[i].templateUrl
	        });
	    }

	    $routeProvider.otherwise( '/fs' );
	}]);
	// ----------------------------------------------------------------------------
	// config multi languages
	filemanager.config(['$translateProvider', function( $translateProvider ) {
	    var languages = ['en'];

	    for( var i in languages ) {
	        $translateProvider.translations( languages[i], __webpack_require__(2)("./" + languages[i] + '.lang.json'));
	    }

	    $translateProvider.useSanitizeValueStrategy( null );
	    $translateProvider.preferredLanguage( 'en' );
	    $translateProvider.fallbackLanguage( 'en' );
	}]);
	// ----------------------------------------------------------------------------
	// fs controller
	filemanager.controller( 'filemanager.fs', [function() {

	}]);
	// ----------------------------------------------------------------------------
	// create login controller
	filemanager.controller( 'filemanager.login', ['$scope', '$http', '$translate', '$mdToast', '$window', function( $scope, $http, $translate, $mdToast, $window ) {
	    $scope.submit = function() {
	        $http.post( '/log', $scope.login ).then( function( res ) {
	            if( !res.data.login ) {
	                return $translate( 'login.wrong' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                });
	            }

	            $window.location.assign( res.data.redirect );
	        }, function( res ) {
	            if( res.status == 403 || !res.data.login ) {
	                return $translate( 'login.wrong' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                });
	            }

	            $translate( 'request.failure' ).then( function( trad ) {
	                $mdToast.showSimple( trad );
	            });
	        });

	        return false;
	    };
	}]);
	// ----------------------------------------------------------------------------
	// fs controller
	filemanager.controller( 'filemanager.manageAccount', ['$scope', '$http', '$translate', '$mdToast', function( $scope, $http, $translate, $mdToast ) {
	    $scope.users = [];

	    // ----------------------------------------------------------------------------
	    // get users
	    $scope.getUsers = function() {
	        $http.get( 'users' ).then( function( res ) {
	            $scope.users = res.data;
	            $scope.user  = null;
	        }, function( res ) {
	            if( res.status == 403 ) {
	                return $translate( 'request.authorized' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                });
	            }

	            $translate( 'request.failure' ).then( function( trad ) {
	                $mdToast.showSimple( trad );
	            });
	        });
	    };

	    // ----------------------------------------------------------------------------
	    // select
	    $scope.select = function( $index ) {
	        $scope.user = $scope.users[$index];
	    };

	    // ----------------------------------------------------------------------------
	    // add
	    $scope.add = function() {
	        $scope.users.push({});
	        $scope.select( $scope.users.length -1 );
	    };

	    // ----------------------------------------------------------------------------
	    // remove
	    $scope.remove = function( $index ) {
	        $http.delete( 'users/' + $scope.users[$index]._id ).then( function() {
	            $scope.getUsers();
	        }, function( res ) {
	            if( res.status == 403 ) {
	                return $translate( 'request.authorized' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                });
	            }

	            $translate( 'request.failure' ).then( function( trad ) {
	                $mdToast.showSimple( trad );
	            });
	        });
	    };

	    // ----------------------------------------------------------------------------
	    // save
	    $scope.save = function() {
	        if( $scope.user._id ) {
	            $http.put( 'users', $scope.user ).then( function() {
	                $scope.getUsers();
	            }, function( res ) {
	                if( res.status == 403 ) {
	                    return $translate( 'request.authorized' ).then( function( trad ) {
	                        $mdToast.showSimple( trad );
	                    });
	                }

	                $translate( 'request.failure' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                });
	            });
	        } else {
	            $http.post( 'users', $scope.user ).then( function() {
	                $scope.getUsers();
	            }, function( res ) {
	                if( res.status == 403 ) {
	                    return $translate( 'request.authorized' ).then( function( trad ) {
	                        $mdToast.showSimple( trad );
	                    });
	                }

	                $translate( 'request.failure' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                });
	            });
	        }

	        return false;
	    };

	    // ----------------------------------------------------------------------------
	    // init
	    $scope.getUsers();
	}]);
	// ----------------------------------------------------------------------------
	// sidenav controller
	filemanager.controller( 'filemanager.sidenav', ['$scope', '$http', '$translate', '$mdToast', function( $scope, $http, $translate, $mdToast ) {
	    $scope.user    = [];
	    $scope.signets = [];

	    $http.get( 'sidenav/user' ).then( function( res ) {
	        $scope.user = res.data;
	    }, function() {
	        $translate( 'request.failure' ).then( function( trad ) {
	            $mdToast.showSimple( trad );
	        });
	    })

	    $http.get( 'sidenav/signet' ).then( function( res ) {
	        $scope.signets = res.data;
	    }, function() {
	        $translate( 'request.failure' ).then( function( trad ) {
	            $mdToast.showSimple( trad );
	        });
	    });
	}]);
	// ----------------------------------------------------------------------------
	// filemanger's controller toolbar
	filemanager.controller( 'filemanager.toolbar', ['$scope', '$http', '$window', '$translate', '$mdToast', function( $scope, $http, $window, $translate, $mdToast ) {
	    $scope.exit = function() {
	        $http.delete( 'log' ).then( function( res ) {
	            if( !res.data.success ) {
	                return $translate( 'request.failure' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                });
	            }

	            $window.location.assign( res.data.redirect );
	        }, function() {
	            $translate( 'request.failure' ).then( function( trad ) {
	                $mdToast.showSimple( trad );
	            });
	        });
	    }
	}]);
	// ----------------------------------------------------------------------------
	// create ucfirst filter
	filemanager.filter( 'lower', [function() {
	    return function( input ) {
	        if( input ) {
	            return input.toLowerCase();
	        }

	        return input;
	    };
	}]);
	// ----------------------------------------------------------------------------
	// create ucfirst filter
	filemanager.filter( 'ucfirst', [function() {
	    return function( input ) {
	        if( input ) {
	            return input.charAt( 0 ).toUpperCase() + input.substring( 1 );
	        }

	        return input;
	    };
	}]);
	// ----------------------------------------------------------------------------
	// create ucfirst filter
	filemanager.filter( 'upper', [function() {
	    return function( input ) {
	        if( input ) {
	            return input.toUpperCase();
	        }

	        return input;
	    };
	}]);
	// ----------------------------------------------------------------------------
	// handle route change
	filemanager.run(['$rootScope', '$http', '$location', '$translate', '$mdToast', function( $rootScope, $http, $location, $translate, $mdToast ) {
	    var paths = [
	        '/manage-account'
	    ];

	    $rootScope.$on( '$routeChangeStart', function() {
	        if( paths.indexOf( $location.path()) == -1 ) {
	            return;
	        }

	        $http.get( 'user' ).then( function( res ) {
	            if( !res.data.administrator ) {
	                $translate( 'request.authorized' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                    $location.path( '/fs' );
	                });
	            }
	        }, function( res ) {
	            if( res.status == 403 ) {
	                return $translate( 'request.authorized' ).then( function( trad ) {
	                    $mdToast.showSimple( trad );
	                });
	            }

	            $translate( 'request.failure' ).then( function( trad ) {
	                $mdToast.showSimple( trad );
	            });
	        });
	    });
	}]);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./en.lang.json": 3
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 2;


/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = {
		"app": {
			"name": "Kraken"
		},
		"request": {
			"failure": "An error has occured, please try later",
			"authorized": "You are not authorized to do this action"
		},
		"login": {
			"username": "Username",
			"password": "Password",
			"send": "Sign in",
			"wrong": "Wrong username or password",
			"error": {
				"required": "This field is required"
			}
		},
		"toolbar": {
			"exit": "Exit"
		},
		"navigation": {
			"manageAccount": "Manage account",
			"fs": "File system"
		},
		"manageAccount": {
			"username": "User name",
			"password": "Password",
			"firstname": "First name",
			"lastname": "Last name",
			"email": "Mail",
			"administrator": "His an administrator ?",
			"submit": "Save",
			"remove": "Remove",
			"error": {
				"required": "This is required.",
				"email": "This is not a correct email."
			}
		}
	};

/***/ }
/******/ ]);